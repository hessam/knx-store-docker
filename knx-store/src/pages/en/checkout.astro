---
import Layout from '../../layouts/Layout.astro';

// Get Stripe key at build time
const stripePublishableKey = import.meta.env.STRIPE_PUBLISHABLE_KEY;
---

<Layout title="Checkout - KNX Store" lang="en">
  <div class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="mb-6">
      <ol class="flex items-center space-x-2 text-sm text-gray-600">
        <li><a href="/en" class="hover:text-blue-600">Home</a></li>
        <li><span class="mx-2">/</span></li>
        <li><a href="/en/cart" class="hover:text-blue-600">Cart</a></li>
        <li><span class="mx-2">/</span></li>
        <li class="text-gray-900">Checkout</li>
      </ol>
    </nav>

    <div class="max-w-4xl mx-auto">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Checkout</h1>
        <p class="text-gray-600">Complete your purchase</p>
      </div>

      <!-- Checkout Content -->
      <div id="checkout-content">
        <!-- Loading State -->
        <div id="checkout-loading" class="text-center py-12">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p class="text-gray-600">Loading checkout...</p>
        </div>

        <!-- Empty Cart State -->
        <div id="empty-cart-state" class="hidden text-center py-12">
          <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
            </svg>
          </div>
          <h2 class="text-2xl font-semibold text-gray-900 mb-4">Your cart is empty</h2>
          <p class="text-gray-600 mb-8">Looks like you haven't added any items to your cart yet.</p>
          <a 
            href="/en/catalog" 
            class="inline-block bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition duration-200"
            data-track-event="button_click"
            data-track-category="CTA"
            data-track-label="browse_catalog_empty_checkout"
          >
            Browse Products
          </a>
        </div>

        <!-- Checkout Form -->
        <div id="checkout-form-container" class="hidden">
          <div class="grid lg:grid-cols-2 gap-8">
            <!-- Checkout Form -->
            <div class="lg:col-span-1">
              <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold text-gray-900 mb-6">Customer Information</h2>
                
                <form id="checkout-form" class="space-y-6">
                  <!-- Personal Information -->
                  <div class="space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Personal Information</h3>
                    
                    <div class="grid grid-cols-2 gap-4">
                      <div>
                        <label for="first-name" class="block text-sm font-medium text-gray-700 mb-1">First Name *</label>
                        <input 
                          type="text" 
                          id="first-name" 
                          name="firstName" 
                          required
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        >
                      </div>
                      <div>
                        <label for="last-name" class="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>
                        <input 
                          type="text" 
                          id="last-name" 
                          name="lastName" 
                          required
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        >
                      </div>
                    </div>
                    
                    <div>
                      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address *</label>
                      <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                    </div>
                    
                    <div>
                      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number *</label>
                      <input 
                        type="tel" 
                        id="phone" 
                        name="phone" 
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                    </div>
                  </div>

                  <!-- Billing Address -->
                  <div class="space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Billing Address</h3>
                    
                    <div>
                      <label for="company" class="block text-sm font-medium text-gray-700 mb-1">Company (Optional)</label>
                      <input 
                        type="text" 
                        id="company" 
                        name="company"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                    </div>
                    
                    <div>
                      <label for="address" class="block text-sm font-medium text-gray-700 mb-1">Address *</label>
                      <input 
                        type="text" 
                        id="address" 
                        name="address" 
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                      <div>
                        <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City *</label>
                        <input 
                          type="text" 
                          id="city" 
                          name="city" 
                          required
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        >
                      </div>
                      <div>
                        <label for="postal-code" class="block text-sm font-medium text-gray-700 mb-1">Postal Code *</label>
                        <input 
                          type="text" 
                          id="postal-code" 
                          name="postalCode" 
                          required
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        >
                      </div>
                    </div>
                    
                    <div>
                      <label for="country" class="block text-sm font-medium text-gray-700 mb-1">Country *</label>
                      <select 
                        id="country" 
                        name="country" 
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="">Select Country</option>
                        <option value="US">United States</option>
                        <option value="CA">Canada</option>
                        <option value="UK">United Kingdom</option>
                        <option value="DE">Germany</option>
                        <option value="FR">France</option>
                        <option value="IR">Iran</option>
                        <option value="AE">United Arab Emirates</option>
                        <option value="SA">Saudi Arabia</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                  </div>

                  <!-- Payment Method -->
                  <div class="space-y-4">
                    <h3 class="text-lg font-medium text-gray-900">Payment Method</h3>
                    
                    <div class="bg-gray-50 p-4 rounded-lg">
                      <div class="flex items-center space-x-3">
                        <input 
                          type="radio" 
                          id="stripe" 
                          name="paymentMethod" 
                          value="stripe" 
                          checked
                          class="text-blue-600 focus:ring-blue-500"
                        >
                        <label for="stripe" class="flex items-center space-x-2">
                          <svg class="w-8 h-5" viewBox="0 0 24 16" fill="currentColor">
                            <path d="M13.976 9.15c-2.172-.806-3.356-1.426-3.356-2.409 0-.831.683-1.305 1.901-1.305 2.227 0 4.515.858 6.09 1.631l.89-5.494C18.252.975 15.697 0 12.165 0 9.667 0 7.589.654 6.104 1.872 4.56 3.147 3.757 4.992 3.757 7.218c0 4.039 2.467 5.76 6.476 7.219 2.585.831 3.47 1.426 3.47 2.338 0 .914-.796 1.431-2.127 1.431-1.72 0-4.516-.924-6.378-2.168l-.9 5.555C8.126 15.064 10.37 16 13.5 16c2.669 0 4.843-.624 6.328-1.813C21.337 12.97 22 11.221 22 9.046c0-4.1-2.806-5.896-8.024-5.896zM24 16v-1.796L22.4 16H24zM1.6 16H0v-1.796L1.6 16z"/>
                          </svg>
                          <span class="text-sm font-medium">Credit Card (Stripe)</span>
                        </label>
                      </div>
                      <p class="text-xs text-gray-500 mt-2 ml-6">Secure payment processing by Stripe</p>
                    </div>
                    
                    <!-- Stripe Card Element Container -->
                            <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <p class="text-sm text-blue-800">
            <strong>Secure Payment:</strong> You will be redirected to Stripe's secure payment page to complete your purchase.
          </p>
        </div>
                  </div>

                  <!-- Submit Button -->
                  <button 
                    type="submit" 
                    id="submit-checkout"
                    class="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition duration-200 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                    data-track-event="button_click"
                    data-track-category="CTA"
                    data-track-label="submit_checkout"
                  >
                    Complete Purchase
                  </button>
                </form>
              </div>
            </div>

            <!-- Order Summary -->
            <div class="lg:col-span-1">
              <div class="bg-gray-50 rounded-lg p-6 sticky top-4">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Order Summary</h3>
                
                <!-- Order Items -->
                <div id="order-items" class="space-y-3 mb-6">
                  <!-- Order items will be dynamically inserted here -->
                </div>

                <!-- Order Totals -->
                <div id="order-totals" class="space-y-3 border-t pt-4">
                  <!-- Order totals will be dynamically inserted here -->
                </div>

                <!-- Security Notice -->
                <div class="mt-6 p-4 bg-blue-50 rounded-lg">
                  <div class="flex items-start space-x-3">
                    <svg class="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                    </svg>
                    <div>
                      <h4 class="text-sm font-medium text-blue-900">Secure Checkout</h4>
                      <p class="text-xs text-blue-700 mt-1">Your payment information is encrypted and secure. We never store your credit card details.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ stripePublishableKey }}>
  class CheckoutPage {
    constructor() {
      // Check if we're in the browser
      if (typeof window !== 'undefined') {
        this.cart = JSON.parse(localStorage.getItem('cart') || '[]');
      } else {
        this.cart = [];
      }
      this.stripe = null;
      this.cardElement = null;
      this.init();
    }

    async init() {
      this.updateDisplay();
      this.bindEvents();
      await this.initializeStripe();
    }

    updateDisplay() {
      const loading = document.getElementById('checkout-loading');
      const emptyState = document.getElementById('empty-cart-state');
      const formContainer = document.getElementById('checkout-form-container');

      // Hide loading
      loading.classList.add('hidden');

      if (this.cart.length === 0) {
        emptyState.classList.remove('hidden');
        formContainer.classList.add('hidden');
        return;
      }

      emptyState.classList.add('hidden');
      formContainer.classList.remove('hidden');

      this.renderOrderSummary();
    }

    renderOrderSummary() {
      const orderItems = document.getElementById('order-items');
      const orderTotals = document.getElementById('order-totals');

      // Render items
      orderItems.innerHTML = '';
      this.cart.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'flex justify-between items-center';
        itemElement.innerHTML = `
          <div class="flex-1">
            <h4 class="text-sm font-medium text-gray-900">${item.title}</h4>
            <p class="text-xs text-gray-500">Qty: ${item.quantity}</p>
          </div>
          <span class="text-sm font-medium text-gray-900">$${(parseFloat(item.price) * item.quantity).toFixed(2)}</span>
        `;
        orderItems.appendChild(itemElement);
      });

      // Calculate totals
      const subtotal = this.cart.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);
      const shipping = 0; // Free shipping
      const tax = subtotal * 0.08; // 8% tax
      const total = subtotal + shipping + tax;

      // Render totals
      orderTotals.innerHTML = `
        <div class="flex justify-between text-sm">
          <span>Subtotal</span>
          <span>$${subtotal.toFixed(2)}</span>
        </div>
        <div class="flex justify-between text-sm">
          <span>Shipping</span>
          <span class="text-green-600">Free</span>
        </div>
        <div class="flex justify-between text-sm">
          <span>Tax</span>
          <span>$${tax.toFixed(2)}</span>
        </div>
        <div class="flex justify-between text-lg font-semibold border-t pt-3">
          <span>Total</span>
          <span class="text-blue-600">$${total.toFixed(2)}</span>
        </div>
      `;
    }

    bindEvents() {
      document.getElementById('checkout-form')?.addEventListener('submit', (e) => this.handleCheckout(e));
    }

    async initializeStripe() {
      try {
        // Load Stripe.js
        await this.loadStripe();
        console.log('✅ Stripe loaded successfully:', this.stripe);
        console.log('✅ Stripe Checkout ready');
        
      } catch (error) {
        console.error('❌ Stripe initialization failed:', error);
        throw error;
      }
    }

    async handleCheckout(e) {
      e.preventDefault();

      const submitBtn = document.getElementById('submit-checkout');
      submitBtn.disabled = true;
      submitBtn.textContent = 'Processing...';

      try {
        // Get form data
        const formData = new FormData(e.target);
        const customerData = {
          firstName: formData.get('firstName'),
          lastName: formData.get('lastName'),
          email: formData.get('email'),
          phone: formData.get('phone'),
          company: formData.get('company'),
          address: formData.get('address'),
          city: formData.get('city'),
          postalCode: formData.get('postalCode'),
          country: formData.get('country'),
          paymentMethod: formData.get('paymentMethod')
        };

        // Validate cart
        if (this.cart.length === 0) {
          throw new Error('Cart is empty');
        }

        // Calculate totals
        const subtotal = this.cart.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);
        const tax = subtotal * 0.08;
        const total = subtotal + tax;

        // Prepare order data
        const orderData = {
          customer: customerData,
          items: this.cart,
          totals: {
            subtotal: subtotal.toFixed(2),
            tax: tax.toFixed(2),
            total: total.toFixed(2)
          },
          orderId: `ORD-${Date.now()}`,
          timestamp: new Date().toISOString()
        };

        // Track checkout event
        if (window.dataLayer) {
          window.dataLayer.push({
            event: 'begin_checkout',
            cart_data: {
              items: this.cart,
              total: total
            }
          });
        }

        // Process payment with Stripe
        await this.processPayment(orderData);

        // Store order data for success page
        localStorage.setItem('lastOrder', JSON.stringify(orderData));
        localStorage.setItem('cart_total', total.toFixed(2));

        // Redirect to success page
        window.location.href = '/en/success';

      } catch (error) {
        console.error('Checkout error:', error);
        alert('Checkout failed. Please try again.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Complete Purchase';
      }
    }

    async processPayment(orderData) {
      try {
        // Use Stripe Checkout (redirect flow) instead of Elements
        if (!this.stripe) {
          console.warn('Stripe not initialized, using fallback payment method');
          return await this.processFallbackPayment(orderData);
        }

        console.log('🔄 Creating Stripe Checkout session...');
        
        // Create checkout session using Stripe Checkout
        const session = await this.stripe.redirectToCheckout({
          lineItems: orderData.items.map(item => ({
            price_data: {
              currency: 'usd',
              product_data: {
                name: item.title,
                description: `SKU: ${item.sku}`,
              },
              unit_amount: Math.round(parseFloat(item.price) * 100), // Convert to cents
            },
            quantity: item.quantity,
          })),
          mode: 'payment',
          success_url: `${window.location.origin}/en/success?session_id={CHECKOUT_SESSION_ID}`,
          cancel_url: `${window.location.origin}/en/checkout`,
          customer_email: orderData.customer.email,
          metadata: {
            orderId: orderData.orderId,
            customerName: `${orderData.customer.firstName} ${orderData.customer.lastName}`,
            customerEmail: orderData.customer.email,
          },
        });

        if (session.error) {
          throw new Error(session.error.message);
        }

        console.log('✅ Stripe Checkout session created, redirecting...');
        return true;

      } catch (error) {
        console.error('❌ Stripe Checkout error:', error);
        console.log('🔄 Falling back to test payment method');
        return await this.processFallbackPayment(orderData);
      }
    }

    async processFallbackPayment(orderData) {
      // Simulate payment processing for testing
      console.log('Processing fallback payment for testing...');
      
      await new Promise((resolve) => {
        setTimeout(() => {
          console.log('Fallback payment processed successfully:', orderData);
          resolve();
        }, 2000);
      });

      // Create WooCommerce order even with fallback payment
      await this.createWooCommerceOrder(orderData, `test_${Date.now()}`);

      return true;
    }

    async createWooCommerceOrder(orderData, paymentIntentId) {
      try {
        const orderResponse = await fetch('http://localhost:3001/api/create-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderData: orderData,
            paymentIntentId: paymentIntentId
          })
        });

        if (orderResponse.ok) {
          const orderResult = await orderResponse.json();
          console.log('WooCommerce order result:', orderResult);
          
          // Store WooCommerce order info
          if (orderResult.wcOrderId) {
            localStorage.setItem('wc_order_id', orderResult.wcOrderId);
            localStorage.setItem('wc_order_number', orderResult.orderNumber);
          }
        } else {
          console.warn('WooCommerce order creation failed, but payment was successful');
        }
      } catch (orderError) {
        console.warn('WooCommerce order creation error:', orderError);
        // Payment was successful, so we continue
      }
    }

    async loadStripe() {
      try {
        // Use the key passed from server
        if (!stripePublishableKey) {
          throw new Error('Stripe publishable key not available');
        }
        
        if (window.Stripe) {
          this.stripe = window.Stripe(stripePublishableKey);
          return this.stripe;
        }
        
        // Load Stripe.js dynamically
        return new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = 'https://js.stripe.com/v3/';
          script.onload = () => {
            try {
              this.stripe = window.Stripe(stripePublishableKey);
              resolve(this.stripe);
            } catch (error) {
              reject(error);
            }
          };
          script.onerror = () => reject(new Error('Failed to load Stripe.js'));
          document.head.appendChild(script);
        });
      } catch (error) {
        console.error('Stripe loading error:', error);
        throw error;
      }
    }

    createMockCardElement() {
      // Mock card element for testing
      return {
        token: 'tok_visa',
        card: {
          brand: 'visa',
          last4: '4242',
          exp_month: 12,
          exp_year: 2025
        }
      };
    }
  }

  // Initialize checkout page
  new CheckoutPage();
</script> 