---
import Layout from '../../layouts/Layout.astro';
import { loadTranslations, isValidLanguage } from '../../lib/i18n';

export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'de' } },
    { params: { lang: 'ar' } }
  ];
}

const { lang } = Astro.params;

if (!lang || !isValidLanguage(lang)) {
  return Astro.redirect('/en/checkout');
}

const t = loadTranslations(lang);

const currencies = [
  { code: 'usd', symbol: '$', name: 'US Dollar' },
  { code: 'eur', symbol: '€', name: 'Euro' },
  { code: 'aed', symbol: 'د.إ', name: 'UAE Dirham' }
];

const title = `${t.checkout} - KNX Store`;
---

<Layout title={title}>
  <main class="container mx-auto px-4 py-8 max-w-2xl">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">{t.checkout}</h1>
    
    <div class="bg-white shadow-lg rounded-lg p-6">
      <div class="mb-6">
        <label for="currency" class="block text-sm font-medium text-gray-700 mb-2">
          {t.selectCurrency}
        </label>
        <select id="currency" class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
          {currencies.map(currency => (
            <option value={currency.code}>
              {currency.symbol} {currency.name} ({currency.code.toUpperCase()})
            </option>
          ))}
        </select>
      </div>

      <form id="payment-form" class="space-y-6">
        <div>
          <label for="amount" class="block text-sm font-medium text-gray-700 mb-2">
            {t.amount}
          </label>
          <div class="relative">
            <span id="currency-symbol" class="absolute left-3 top-3 text-gray-500">$</span>
            <input 
              type="number" 
              id="amount" 
              step="0.01" 
              min="0.01"
              value="99.99"
              class="w-full pl-8 pr-3 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="0.00"
            />
          </div>
        </div>

        <div>
          <label for="customer-email" class="block text-sm font-medium text-gray-700 mb-2">
            {t.email}
          </label>
          <input 
            type="email" 
            id="customer-email" 
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="customer@example.com"
            required
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            {t.cardDetails}
          </label>
          <div id="card-element" class="p-3 border border-gray-300 rounded-md focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500">
          </div>
          <div id="card-errors" class="text-red-600 text-sm mt-2 hidden"></div>
        </div>

        <button 
          type="submit" 
          id="submit-button"
          class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="button-text">{t.payNow}</span>
          <div id="spinner" class="hidden">
            <svg class="animate-spin h-5 w-5 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
        </button>
      </form>

      <div id="payment-status" class="mt-6 p-4 rounded-md hidden">
        <div id="success-message" class="text-green-700 bg-green-100 p-3 rounded-md hidden">
          <h3 class="font-semibold">{t.paymentSuccess}</h3>
          <p id="success-details"></p>
        </div>
        <div id="error-message" class="text-red-700 bg-red-100 p-3 rounded-md hidden">
          <h3 class="font-semibold">{t.paymentError}</h3>
          <p id="error-details"></p>
        </div>
      </div>
    </div>

    <div class="mt-8 bg-gray-50 p-4 rounded-lg">
      <h3 class="font-semibold text-gray-900 mb-2">{t.testCards}</h3>
      <div class="text-sm text-gray-600 space-y-1">
        <p><strong>Visa:</strong> 4242 4242 4242 4242</p>
        <p><strong>Mastercard:</strong> 5555 5555 5555 4444</p>
        <p><strong>Any future date:</strong> 12/25</p>
        <p><strong>Any CVC:</strong> 123</p>
      </div>
    </div>
  </main>

  <script src="https://js.stripe.com/v3"></script>
  <script>
    let stripe: any = null;
    let elements: any = null;
    let cardElement: any = null;

    const currencySelect = document.getElementById('currency') as HTMLSelectElement;
    const currencySymbol = document.getElementById('currency-symbol');
    const amountInput = document.getElementById('amount') as HTMLInputElement;
    
    const currencySymbols: Record<string, string> = {
      usd: '$',
      eur: '€',
      aed: 'د.إ'
    };

    function updateCurrencySymbol() {
      const selectedCurrency = currencySelect.value;
      currencySymbol!.textContent = currencySymbols[selectedCurrency] || '$';
    }

    currencySelect?.addEventListener('change', updateCurrencySymbol);
    updateCurrencySymbol();

    const form = document.getElementById('payment-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const buttonText = document.getElementById('button-text');
    const spinner = document.getElementById('spinner');
    const paymentStatus = document.getElementById('payment-status');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const successDetails = document.getElementById('success-details');
    const errorDetails = document.getElementById('error-details');

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const amount = parseFloat(amountInput.value);
      const currency = currencySelect.value;
      const customerEmail = (document.getElementById('customer-email') as HTMLInputElement).value;

      if (!amount || amount <= 0) {
        showError('Please enter a valid amount');
        return;
      }

      if (!customerEmail) {
        showError('Please enter your email address');
        return;
      }

      setLoading(true);

      try {
        const response = await fetch('/api/payments/create-intent', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            amount,
            currency,
            customerEmail,
            productId: 'test-product'
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Payment failed');
        }

        const { clientSecret, publishableKey } = result;

        if (!stripe) {
          // @ts-ignore
          stripe = window.Stripe(publishableKey);
          elements = stripe.elements();
          cardElement = elements.create('card', {
            style: {
              base: {
                fontSize: '16px',
                color: '#424770',
                '::placeholder': { color: '#aab7c4' },
              },
              invalid: { color: '#9e2146' },
            },
          });
          cardElement.mount('#card-element');
        }

        const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: cardElement,
            billing_details: { email: customerEmail },
          },
        });

        if (error) {
          throw new Error(error.message);
        }

        if (paymentIntent && paymentIntent.status === 'succeeded') {
          showSuccess(`Payment successful! Amount: ${currencySymbols[currency]}${amount.toFixed(2)}`);
        } else {
          throw new Error('Payment was not completed');
        }

      } catch (error) {
        showError((error as Error).message);
      } finally {
        setLoading(false);
      }
    });

    function setLoading(isLoading: boolean) {
      submitButton.disabled = isLoading;
      buttonText!.style.display = isLoading ? 'none' : 'block';
      spinner!.style.display = isLoading ? 'block' : 'none';
    }

    function showSuccess(message: string) {
      paymentStatus!.classList.remove('hidden');
      successMessage!.classList.remove('hidden');
      errorMessage!.classList.add('hidden');
      successDetails!.textContent = message;
    }

    function showError(message: string) {
      paymentStatus!.classList.remove('hidden');
      errorMessage!.classList.remove('hidden');
      successMessage!.classList.add('hidden');
      errorDetails!.textContent = message;
    }

    cardElement.addEventListener('change', ({error}: any) => {
      const displayError = document.getElementById('card-errors');
      if (error) {
        displayError!.textContent = error.message;
        displayError!.classList.remove('hidden');
      } else {
        displayError!.textContent = '';
        displayError!.classList.add('hidden');
      }
    });
  </script>
</Layout>
