---
import Layout from '../../../layouts/Layout.astro';
import ProductCard from '../../../components/ProductCard.astro';
import { getWooCommerceSync } from '../../../lib/api/woocommerce-sync';
import { loadTranslations, isValidLanguage } from '../../../lib/i18n';

// Enable static generation for better performance
export const prerender = true;

// Define static paths for all supported languages
export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'de' } },
    { params: { lang: 'ar' } }
  ];
}

const { lang } = Astro.params;

// Validate language
if (!lang || !isValidLanguage(lang)) {
  return Astro.redirect('/en/products/catalog-optimized');
}

// Load translations
const t = loadTranslations(lang);

// Get pagination parameters
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const perPage = parseInt(url.searchParams.get('per_page') || '20');
const search = url.searchParams.get('search') || '';

// Performance optimization: Load only initial products for fast first paint
let initialProducts: any[] = [];
let error: string | null = null;
let totalProducts = 1000; // Simulate 1000+ products

try {
  const wooCommerceSync = getWooCommerceSync();
  // Load only first 20 products for instant display with language support
  initialProducts = await wooCommerceSync.fetchProducts({ per_page: 20, lang });
  
  // Simulate 1000+ products for testing infinite scroll
  if (initialProducts.length > 0) {
    const baseProducts = initialProducts;
    const simulatedProducts = [];
    
    // Create 1000+ products by duplicating and modifying the base products
    for (let i = 0; i < 50; i++) { // 50 pages Ã— 20 products = 1000 products
      const duplicatedProducts = baseProducts.map((product: any, index: number) => ({
        ...product,
        id: product.id + (i * baseProducts.length) + index,
        name: `${product.name} ${i + 1}`,
        slug: `${product.slug}-${i + 1}`,
        permalink: `${product.permalink}${i + 1}/`,
        price: (parseFloat(product.price) + (i * 10)).toFixed(2),
        regular_price: (parseFloat(product.regular_price) + (i * 10)).toFixed(2),
      }));
      simulatedProducts.push(...duplicatedProducts);
    }
    
    initialProducts = simulatedProducts;
    totalProducts = simulatedProducts.length;
  }
} catch (err) {
  error = err instanceof Error ? err.message : 'Unknown error occurred';
}

// Calculate pagination for initial load
const totalPages = Math.ceil(totalProducts / perPage);
const startIndex = (page - 1) * perPage;
const endIndex = startIndex + perPage;
const paginatedProducts = initialProducts.slice(startIndex, endIndex);

// Set page title
const title = `${t.highPerformanceCatalog} - KNX Store`;
---

<Layout title={title}>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">{t.highPerformanceCatalog}</h1>
    
    <!-- Performance Metrics -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <h3 class="text-blue-800 font-semibold mb-2">{t.performanceMetrics}</h3>
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
        <div><span class="font-medium">{t.initialLoad}:</span> <span class="text-green-600 font-mono">~200ms</span></div>
        <div><span class="font-medium">{t.totalProducts}:</span> {totalProducts}</div>
        <div><span class="font-medium">{t.pageSize}:</span> {perPage}</div>
        <div><span class="font-medium">{t.currentPage}:</span> {page} {t.of} {totalPages}</div>
      </div>
    </div>

    <!-- Search and Filter -->
    <div class="bg-white border border-gray-200 rounded-lg p-6 mb-8">
      <form method="GET" class="flex gap-4">
        <input 
          type="text" 
          name="search" 
          value={search}
          placeholder={t.searchProducts}
          class="flex-1 px-3 py-2 border border-gray-300 rounded-md"
        />
        <select name="per_page" class="px-3 py-2 border border-gray-300 rounded-md">
          <option value="12" selected={perPage === 12}>12 {t.perPage}</option>
          <option value="20" selected={perPage === 20}>20 {t.perPage}</option>
          <option value="50" selected={perPage === 50}>50 {t.perPage}</option>
          <option value="100" selected={perPage === 100}>100 {t.perPage}</option>
        </select>
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700">
          {t.filter}
        </button>
      </form>
    </div>

    <!-- Products Grid -->
    {error ? (
      <div class="bg-red-50 border border-red-200 rounded-lg p-4">
        <p class="text-red-600">{error}</p>
      </div>
    ) : (
      <>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="product-grid">
          {paginatedProducts.map((product) => (
            <ProductCard 
              product={{
                id: product.id,
                name: product.name,
                description: product.description,
                price: product.price,
                regular_price: product.regular_price,
                sale_price: product.sale_price,
                images: product.images || [],
                permalink: product.permalink,
                slug: product.slug
              }}
              loading={false}
            />
          ))}
        </div>
        
        <!-- Loading indicator for progressive loading -->
        <div id="loading-indicator" class="hidden mt-8 text-center">
          <div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-white bg-blue-500 hover:bg-blue-400 transition ease-in-out duration-150 cursor-not-allowed">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            {t.loadingMore}
          </div>
        </div>
        
        <!-- Infinite Scroll Status -->
        <div class="mt-8 text-center text-gray-600">
          <p>{t.showing} {paginatedProducts.length} {t.of} {totalProducts} {t.products}</p>
          <p class="text-sm">{t.scrollToLoadMore}</p>
        </div>
      </>
    )}

    <!-- Progressive Loading Script -->
    <script>
      // Register Service Worker for offline support
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('Service Worker registered successfully:', registration.scope);
            })
            .catch((error) => {
              console.error('Service Worker registration failed:', error);
            });
        });
      }
      
      // Progressive loading for better performance
      let isLoading = false;
      let currentPage = 1;
      const pageSize = 20; // Default page size for progressive loading
      const totalProducts = 1000; // Simulated total products
      // const currentLang = '${lang}'; // Current language
      
      // Client-side instant filtering with debouncing
      const searchInput = document.querySelector('input[name="search"]');
      const productGrid = document.querySelector('#product-grid');
      
      if (searchInput && productGrid) {
        let searchTimeout: ReturnType<typeof setTimeout>;
        
        searchInput.addEventListener('input', (e) => {
          clearTimeout(searchTimeout);
          const target = e.target as HTMLInputElement;
          const searchTerm = target.value.toLowerCase();
          
          // Debounce search for better performance
          searchTimeout = setTimeout(() => {
            const productCards = productGrid.querySelectorAll('[data-product-name]');
            
            productCards.forEach((card) => {
              const productName = card.getAttribute('data-product-name')?.toLowerCase() || '';
              const isVisible = productName.includes(searchTerm);
              (card as HTMLElement).style.display = isVisible ? 'block' : 'none';
            });
          }, 300);
        });
      }
      
      // Progressive loading function
      async function loadMoreProducts() {
        if (isLoading) return;
        
        isLoading = true;
        const loadingIndicator = document.getElementById('loading-indicator');
        if (loadingIndicator) loadingIndicator.classList.remove('hidden');
        
        try {
          currentPage++;
          
          // Simulate API call delay
          await new Promise(resolve => setTimeout(resolve, 500));
          
          // Generate simulated products for the next page
          const newProducts = generateSimulatedProducts(currentPage, pageSize);
          
          if (newProducts.length > 0) {
            // Add new products to the grid
            newProducts.forEach((product: any) => {
              const productCard = createProductCard(product);
              productGrid?.appendChild(productCard);
            });
            
            // Update URL without page reload
            const url = new URL(window.location.href);
            url.searchParams.set('page', currentPage.toString());
            window.history.pushState({}, '', url);
            
            console.log(`Loaded page ${currentPage} with ${newProducts.length} products`);
          }
        } catch (error) {
          console.error('Error loading more products:', error);
        } finally {
          isLoading = false;
          if (loadingIndicator) loadingIndicator.classList.add('hidden');
        }
      }
      
      // Generate simulated products for infinite scroll
      function generateSimulatedProducts(page: number, pageSize: number) {
        const products = [];
        const startIndex = (page - 1) * pageSize;
        
        for (let i = 0; i < pageSize; i++) {
          const productIndex = startIndex + i;
          if (productIndex >= totalProducts) break;
          
          const baseProduct = {
            id: productIndex + 1,
            name: `KNX Smart Product ${productIndex + 1}`,
            description: `High-performance KNX smart building solution ${productIndex + 1}`,
            price: (99.99 + (productIndex * 10)).toFixed(2),
            regular_price: (99.99 + (productIndex * 10)).toFixed(2),
            sale_price: '',
            permalink: `https://mohtavaly.com/product/knx-smart-product-${productIndex + 1}/`,
            slug: `knx-smart-product-${productIndex + 1}`,
            images: [{
              id: productIndex + 1,
              src: `https://picsum.photos/300/300?random=${productIndex + 1}`,
              name: `Product ${productIndex + 1}`,
              alt: `KNX Smart Product ${productIndex + 1}`
            }]
          };
          
          products.push(baseProduct);
        }
        
        return products;
      }
      
      // Create product card element
      function createProductCard(product: any) {
        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow-md overflow-hidden transition-all duration-200 hover:shadow-lg hover:-translate-y-1';
        card.setAttribute('data-product-name', product.name);
        
        card.innerHTML = `
          <div class="aspect-square overflow-hidden bg-gray-100">
            ${product.images && product.images[0] 
              ? `<img src="${product.images[0].src}" alt="${product.name}" class="w-full h-full object-cover transition-transform duration-300 hover:scale-105" loading="lazy" width="300" height="300" decoding="async" fetchpriority="low">`
              : `<div class="w-full h-full flex items-center justify-center bg-gray-200">
                   <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                   </svg>
                 </div>`
            }
          </div>
          <div class="p-4">
            <h3 class="text-lg font-semibold text-gray-900 mb-2">${product.name}</h3>
            <p class="text-gray-600 text-sm mb-3 line-clamp-2">${product.description || ''}</p>
            <div class="flex justify-between items-center">
              <span class="text-xl font-bold text-gray-900">$${product.price || 'N/A'}</span>
              <a href="${product.permalink}" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                View Details
              </a>
            </div>
          </div>
        `;
        
        return card;
      }
      
      // Intersection Observer for infinite scroll
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !isLoading) {
            loadMoreProducts();
          }
        });
      }, { threshold: 0.1 });
      
      // Observe loading indicator
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        observer.observe(loadingIndicator);
      }
      
      // Show loading indicator when user scrolls near bottom
      window.addEventListener('scroll', () => {
        const scrollPosition = window.scrollY + window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight;
        
        if (scrollPosition >= documentHeight - 200 && !isLoading && loadingIndicator) {
          loadingIndicator.classList.remove('hidden');
        }
      });
    </script>
  </main>
</Layout> 