---
import Layout from '../../layouts/Layout.astro';
import { loadTranslations, isValidLanguage } from '../../lib/i18n';

export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'de' } },
    { params: { lang: 'ar' } }
  ];
}

const { lang } = Astro.params;

if (!lang || !isValidLanguage(lang)) {
  return Astro.redirect('/en/login');
}

const t = loadTranslations(lang);
const title = `${t.login} - KNX Store`;
---

<Layout title={title}>
  <main class="container mx-auto px-4 py-8 max-w-md">
    <h1 class="text-3xl font-bold text-gray-900 mb-8 text-center">{t.login}</h1>
    
    <div class="bg-white shadow-lg rounded-lg p-6">
      <form id="login-form" class="space-y-6">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-2">{t.email}</label>
          <input 
            type="email" 
            id="email" 
            required
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="admin@knxstore.com"
          />
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-2">{t.password}</label>
          <input 
            type="password" 
            id="password" 
            required
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="admin123"
          />
        </div>

        <button 
          type="submit" 
          class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          {t.loginButton}
        </button>
      </form>

      <div id="login-status" class="mt-4 p-3 rounded-md hidden">
        <div id="success-message" class="text-green-700 bg-green-100 p-3 rounded-md hidden">
          {t.loginSuccess}
        </div>
        <div id="error-message" class="text-red-700 bg-red-100 p-3 rounded-md hidden">
          <span id="error-text"></span>
        </div>
      </div>
    </div>

    <div class="mt-6 text-center text-sm text-gray-600">
      <p><strong>Test Accounts:</strong></p>
      <p>Admin: admin@knxstore.com / admin123</p>
      <p>User: user@knxstore.com / user123</p>
    </div>
  </main>

  <script>
    const form = document.getElementById('login-form') as HTMLFormElement;
    const loginStatus = document.getElementById('login-status');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = (document.getElementById('email') as HTMLInputElement).value;
      const password = (document.getElementById('password') as HTMLInputElement).value;

      try {
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password }),
        });

        const result = await response.json();

        if (response.ok) {
          showSuccess();
          setTimeout(() => {
            window.location.href = `/${window.location.pathname.split('/')[1]}/account`;
          }, 1000);
        } else {
          showError(result.error || 'Login failed');
        }
      } catch (error) {
        showError('Network error. Please try again.');
      }
    });

    function showSuccess() {
      loginStatus!.classList.remove('hidden');
      successMessage!.classList.remove('hidden');
      errorMessage!.classList.add('hidden');
    }

    function showError(message: string) {
      loginStatus!.classList.remove('hidden');
      errorMessage!.classList.remove('hidden');
      successMessage!.classList.add('hidden');
      errorText!.textContent = message;
    }
  </script>
</Layout>
