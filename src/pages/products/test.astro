---
import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import { getWooCommerceSync } from '../../lib/api/woocommerce-sync';

// Fetch products from WooCommerce API
let products: any[] = [];
let error: string | null = null;
let loading = true;
let syncStatus: any = null;

try {
  const wooCommerceSync = getWooCommerceSync();
  products = await wooCommerceSync.fetchProducts({ per_page: 8 });
  syncStatus = await wooCommerceSync.getSyncStatus();
  
  // Debug logging
  console.log('[Products Test] Fetched products:', products.length);
  console.log('[Products Test] First product:', products[0]);
  console.log('[Products Test] Sync status:', syncStatus);
  
  loading = false;
} catch (err) {
  error = err instanceof Error ? err.message : 'Unknown error occurred';
  console.error('[Products Test] Error:', err);
  loading = false;
}

// Mock product data for loading state demonstration
const mockProduct = {
  id: 1,
  name: "Sample Product",
  description: "This is a sample product description for testing purposes.",
  price: "99.99",
  regular_price: "99.99",
  sale_price: "79.99",
  images: [
    {
      src: "https://via.placeholder.com/400x400?text=Product+Image",
      alt: "Sample Product"
    }
  ],
  permalink: "/products/sample",
  slug: "sample"
};
---

<Layout title="Products Test - KNX Store">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Products Test Page</h1>
    
    <!-- Loading State Demo -->
    <section class="mb-12">
      <h2 class="text-2xl font-semibold text-gray-800 mb-6">Loading State Demo</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <!-- Loading Product Card -->
        <ProductCard product={mockProduct} loading={true} />
        
        <!-- Regular Product Card -->
        <ProductCard product={mockProduct} loading={false} />
        
        <!-- Another Loading Card -->
        <ProductCard product={mockProduct} loading={true} />
        
        <!-- Another Regular Card -->
        <ProductCard product={mockProduct} loading={false} />
      </div>
    </section>

    <!-- Real Products from API -->
    <section class="mb-12">
      <h2 class="text-2xl font-semibold text-gray-800 mb-6">
        Real Products from WooCommerce API
        {loading && <span class="text-blue-600"> (Loading...)</span>}
      </h2>
      
      {syncStatus && (
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <h3 class="text-blue-800 font-semibold">Sync Status</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span class="font-medium">Last Sync:</span> {new Date(syncStatus.lastSync).toLocaleString()}
            </div>
            <div>
              <span class="font-medium">Products:</span> {syncStatus.totalProducts}
            </div>
            <div>
              <span class="font-medium">Status:</span> 
              <span class={`px-2 py-1 rounded text-xs ${
                syncStatus.status === 'success' ? 'bg-green-100 text-green-800' :
                syncStatus.status === 'error' ? 'bg-red-100 text-red-800' :
                'bg-yellow-100 text-yellow-800'
              }`}>
                {syncStatus.status}
              </span>
            </div>
          </div>
        </div>
      )}
      
      {!syncStatus && (
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <h3 class="text-yellow-800 font-semibold">Sync Status</h3>
          <p class="text-yellow-700 text-sm">Sync status unavailable (Redis not available in Vercel)</p>
        </div>
      )}
      
      {error && (
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <h3 class="text-red-800 font-semibold">Error Loading Products</h3>
          <p class="text-red-600">{error}</p>
        </div>
      )}
      
      {loading ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {Array.from({ length: 8 }).map(() => (
            <ProductCard product={mockProduct} loading={true} />
          ))}
        </div>
      ) : products.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.slice(0, 8).map((product) => (
            <ProductCard 
              product={{
                id: product.id,
                name: product.name,
                description: product.description,
                price: product.price,
                regular_price: product.regular_price,
                sale_price: product.sale_price,
                images: product.images || [],
                permalink: product.permalink,
                slug: product.slug
              }}
              loading={false}
            />
          ))}
        </div>
      ) : (
        <div class="text-center py-12">
          <p class="text-gray-600">No products found.</p>
        </div>
      )}
      
      <!-- Debug Section -->
      {products.length > 0 && (
        <section class="mb-12">
          <h2 class="text-2xl font-semibold text-gray-800 mb-6">Debug: Raw Products Data</h2>
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <h3 class="text-gray-800 font-semibold mb-2">First Product Raw Data:</h3>
            <pre class="text-xs overflow-auto bg-white p-4 border rounded">
              {JSON.stringify(products[0], null, 2)}
            </pre>
          </div>
        </section>
      )}
    </section>
  </main>
</Layout> 